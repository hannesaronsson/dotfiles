#!/usr/bin/env bash
# This script is managed by chezmoi and will be run once on initialization

set -euo pipefail
msg() { printf "\e[32m\u25b6 %s\e[0m\n" "$*"; }

{{- if eq .chezmoi.os "darwin" }}
# Editable lists of Homebrew packages, casks, and Aerospace options
BREW_PACKAGES=(
  stow
  neovim
  alacritty
  borders
  pyenv
  colima
  docker
  fzf
  htop
  tree
  poetry
)
BREW_CASKS=(
  font-fira-code-nerd-font
  visual-studio-code
  miniconda
)
AEROSPACE_OPTIONS=(
  --HEAD
  aerospace
)

# Check if macOS
if [[ "$(uname)" == "Darwin" ]]; then
  # Ensure Xcode Command Line Tools are installed
  if ! xcode-select -p >/dev/null 2>&1; then
    echo "Installing Xcode Command Line Tools..."
    xcode-select --install
  fi

  # Disable press-and-hold for key repeat
  echo "Disabling press-and-hold for key repeat and changing other defaults..."
  defaults write -g ApplePressAndHoldEnabled -bool false
  defaults write -g NSWindowShouldDragOnGesture -bool true
  defaults write com.apple.spaces spans-displays -bool true



  # Install custom US no-dead-key keyboard layout if present
  LAYOUT_SRC="keyboard-layouts/us_no_dead_key.keylayout"
  if [ -f "$LAYOUT_SRC" ]; then
    echo "Installing custom keyboard layout..."
    sudo cp "$LAYOUT_SRC" "/Library/Keyboard Layouts/"
  fi

  # Install Homebrew if missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Homebrew not found. Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # Update Homebrew and upgrade existing formulae
  echo "Updating Homebrew..."
  brew update
  brew upgrade
  brew analytics off

  # Install Homebrew packages
  echo "Installing Homebrew packages: ${BREW_PACKAGES[*]}"
  for package in "${BREW_PACKAGES[@]}"; do
    if ! brew list | grep -q "^${package}\$"; then
      echo "Installing $package..."
      brew install "$package"
    else
      echo "✅ $package is already installed, skipping."
    fi
  done

  # Configure Poetry
  echo "Configuring Poetry virtualenvs location..."
  poetry config virtualenvs.in-project true

  # Install Homebrew casks
  #brew tap homebrew/cask-fonts
  echo "Installing Homebrew casks: ${BREW_CASKS[*]}"
  for cask in "${BREW_CASKS[@]}"; do
    if [[ "$cask" == "font-fira-code-nerd-font" ]] && [[ -f "$HOME/Library/Fonts/FiraCodeNerdFont-Bold.ttf" ]]; then
      echo "✅ Font $cask already exists at ~/Library/Fonts, skipping."
      continue
    fi

    if ! brew list --cask | grep -q "^${cask}\$"; then
      echo "Installing $cask..."
      brew install --cask "$cask"
    else
      echo "✅ $cask is already installed, skipping."
    fi
  done

  # Start Colima service
  echo "Starting Colima service..."
  brew services start colima
  colima start


  # Install aerospace if missing
  if ! command -v aerospace >/dev/null 2>&1; then
    echo "Installing aerospace..."
    brew install "${AEROSPACE_OPTIONS[@]}"
  else
    echo "✅ Aerospace is already installed, skipping."
  fi
else
  echo "This script currently only supports macOS."
fi

{{- else if eq .chezmoi.os "linux" }}


# 1.  Packages you actually used (from shell history)
PACMAN_PKGS=(
  # shells & basics
  zsh git curl wget base-devel fzf htop tree neovim # dev & python
  python python-pip keepassxc                                       # keepass secret
  gh github-cli                                                     # GitHub CLI
  # container / infra
  docker docker-compose podman podman-compose                       # media-stack work 
  firewalld                                                         # firewall tweaks
  wireguard-tools                                                   # wg-quick confs
  mullvad-vpn                                                       # CLI VPN 
  waybar
  # multimedia / audio
  pipewire pipewire-alsa pipewire-jack pipewire-pulse wireplumber   # audio stack
  gst-plugin-pipewire helvum easyeffects pavucontrol
  # fonts & desktop
  ttf-firacode-nerd                                                 # nerd font for Alacritty
  wl-copy wayclip                                                   # clipboard helpers
  bluez bluez-utils                                                 # Bluetooth
  mesa libva-mesa-driver libva-utils vulkan-radeon lib32-vulkan-radeon vulkan-tools  # GPU
  ntfs-3g                                                           # media disk mounts # gaming / input
  steam game-devices-udev evtest                                    # Steam & controller tweaks
)


msg "Updating pacman & installing packages\u2026"
sudo pacman -Syu --noconfirm
sudo pacman -S --needed --noconfirm "${PACMAN_PKGS}"

  # AUR helper (yay) for visual-studio-code-bin, mullvad-vpn-bin, nerd fonts, etc.
  if ! command -v yay &>/dev/null; then
    git clone --depth 1 https://aur.archlinux.org/yay.git /tmp/yay
    (cd /tmp/yay && makepkg -si --noconfirm); rm -rf /tmp/yay
  fi
  #yay -S --needed --noconfirm visual-studio-code-bin mullvad-vpn-bin ttf-firacode-nerd-font


# 4.  System tweaks & service enablement
msg "Enabling Docker & PipeWire\u2026"
sudo systemctl enable --now docker
systemctl --user enable --now pipewire pipewire-pulse wireplumber || true

msg "Enabling Firewalld & Bluetooth\u2026"
sudo systemctl enable --now firewalld || true
sudo systemctl enable --now bluetooth || true

# Add user to handy groups
sudo usermod -aG docker "$USER"
sudo usermod -aG video,render "$USER"          # VA-API & Vulkan inside containers

{{- end }}
if [[ "$SHELL" != */zsh ]]; then
  msg "Setting default shell to zsh\u2026"; chsh -s "$(command -v zsh)"
fi

if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
  msg "Installing Oh-My-Zsh\u2026"
  RUNZSH=no KEEP_ZSHRC=yes sh -c \
    "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

msg "\u2714 One-time bootstrap done \u2013 open a new terminal!"
