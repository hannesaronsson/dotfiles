#!/usr/bin/env bash
# This script is managed by chezmoi and will be run once on initialization

set -euo pipefail
set -o errtrace

msg_section() { printf "\n\033[1;36m==> %s\033[0m\n" "$*"; }
msg_info() { printf "\033[32m\u25b6 %s\033[0m\n" "$*"; }
msg_warn() { printf "\033[33m\u26a0 %s\033[0m\n" "$*"; }
msg_error() { printf "\033[31m\u2716 %s\033[0m\n" "$*"; }
msg_success() { printf "\033[32m\u2714 %s\033[0m\n" "$*"; }
msg() { msg_info "$@"; }

CURRENT_STEP=""

run() {
  local description=$1
  shift
  CURRENT_STEP="$description"
  msg_info "$description"
  "$@"
  CURRENT_STEP=""
}

run_or_warn() {
  local description=$1
  shift
  CURRENT_STEP="$description"
  msg_info "$description"
  if ! "$@"; then
    local exit_code=$?
    msg_warn "$description failed (exit ${exit_code}); continuing."
  fi
  CURRENT_STEP=""
}

trap_err() {
  local lineno=$1
  local exit_code=$2
  if [[ -n "$CURRENT_STEP" ]]; then
    msg_error "Step '$CURRENT_STEP' failed (exit ${exit_code}) at line ${lineno}: ${BASH_COMMAND}"
  else
    msg_error "Command failed (exit ${exit_code}) at line ${lineno}: ${BASH_COMMAND}"
  fi
  exit "$exit_code"
}

trap 'trap_err $LINENO $?' ERR

{{- if eq .chezmoi.os "darwin" }}
# Editable lists of Homebrew packages, casks, and Aerospace options
BREW_PACKAGES=(
  stow
  neovim
  alacritty
  zoxide
  borders
  pyenv
  fzf
  htop
  tree
  poetry
)
BREW_CASKS=(
  font-fira-code-nerd-font
  visual-studio-code
  miniconda
)
AEROSPACE_OPTIONS=(
  --HEAD
  aerospace
)

# Check if macOS
if [[ "$(uname)" == "Darwin" ]]; then
  # Ensure Xcode Command Line Tools are installed
  if ! xcode-select -p >/dev/null 2>&1; then
    echo "Installing Xcode Command Line Tools..."
    xcode-select --install
  fi

  # Disable press-and-hold for key repeat
  echo "Disabling press-and-hold for key repeat and changing other defaults..."
  defaults write -g ApplePressAndHoldEnabled -bool false
  defaults write -g NSWindowShouldDragOnGesture -bool true
  defaults write com.apple.spaces spans-displays -bool true



  # Install custom US no-dead-key keyboard layout if present
  LAYOUT_SRC="keyboard-layouts/us_no_dead_key.keylayout"
  if [ -f "$LAYOUT_SRC" ]; then
    echo "Installing custom keyboard layout..."
    sudo cp "$LAYOUT_SRC" "/Library/Keyboard Layouts/"
  fi

  # Install Homebrew if missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Homebrew not found. Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # Update Homebrew and upgrade existing formulae
  echo "Updating Homebrew..."
  brew update
  brew upgrade
  brew analytics off

  # Install Homebrew packages
  echo "Installing Homebrew packages: ${BREW_PACKAGES[*]}"
  for package in "${BREW_PACKAGES[@]}"; do
    if ! brew list | grep -q "^${package}\$"; then
      echo "Installing $package..."
      brew install "$package"
    else
      echo "✅ $package is already installed, skipping."
    fi
  done

  # Configure Poetry
  echo "Configuring Poetry virtualenvs location..."
  poetry config virtualenvs.in-project true

  # Install Homebrew casks
  #brew tap homebrew/cask-fonts
  echo "Installing Homebrew casks: ${BREW_CASKS[*]}"
  for cask in "${BREW_CASKS[@]}"; do
    if [[ "$cask" == "font-fira-code-nerd-font" ]] && [[ -f "$HOME/Library/Fonts/FiraCodeNerdFont-Bold.ttf" ]]; then
      echo "✅ Font $cask already exists at ~/Library/Fonts, skipping."
      continue
    fi

    if ! brew list --cask | grep -q "^${cask}\$"; then
      echo "Installing $cask..."
      brew install --cask "$cask"
    else
      echo "✅ $cask is already installed, skipping."
    fi
  done



  # Install aerospace if missing
  if ! command -v aerospace >/dev/null 2>&1; then
    echo "Installing aerospace..."
    brew install "${AEROSPACE_OPTIONS[@]}"
  else
    echo "✅ Aerospace is already installed, skipping."
  fi
else
  echo "This script currently only supports macOS."
fi

{{- else if eq .chezmoi.os "linux" }}


# 1.  Packages you actually used (from shell history)
PACMAN_PKGS=(
  # shells & basics
  zsh git curl wget base-devel fzf htop tree neovim                  # dev & python
  qt5ct qt6ct kvantum kvantum-qt5 breeze-icons adw-gtk-theme         # dark mode
  python python-pip keepassxc                                        # keepass secret
  github-cli                                                         # GitHub CLI
  # container / infra
  docker docker-compose podman podman-compose                        # media-stack work
  firewalld                                                          # firewall tweaks
  wireguard-tools                                                    # wg-quick confs
  waybar
  # multimedia / audio
  pipewire pipewire-alsa pipewire-jack pipewire-pulse wireplumber    # audio stack
  gst-plugin-pipewire helvum easyeffects pavucontrol
  # fonts & desktop
  wl-clipboard                                                       # clipboard helpers
  xdg-desktop-portal xdg-desktop-portal-hyprland xdg-desktop-portal-gtk xdg-utils
  bluez bluez-utils                                                  # Bluetooth
  mesa libva-mesa-driver libva-utils vulkan-radeon lib32-vulkan-radeon vulkan-tools  # GPU
  ntfs-3g                                                            # media disk mounts # gaming / input
  steam evtest                                                       # Steam & controller tweaks
)

AUR_PKGS=(
  uwsm
  hyprpolkitagent
  hypridle
  hyprlock
  wayclip
  game-devices-udev
  ttf-firacode-nerd
  mullvad-vpn-bin
  visual-studio-code-bin
)


msg_section "Pacman packages"
msg_info "Pacman package list: ${PACMAN_PKGS[*]}"
run "Synchronizing pacman databases" sudo pacman -Syu --noconfirm
run "Installing pacman packages (${#PACMAN_PKGS[@]})" sudo pacman -S --needed --noconfirm "${PACMAN_PKGS[@]}"

  # AUR helper (yay) for hyprland utils, fonts, etc.
  msg_section "AUR packages"
  if ! command -v yay &>/dev/null; then
    run_or_warn "Removing stale yay build directory" rm -rf /tmp/yay
    run "Cloning yay AUR helper" git clone --depth 1 https://aur.archlinux.org/yay.git /tmp/yay
    run "Building and installing yay" bash -c "cd /tmp/yay && makepkg -si --noconfirm"
    run_or_warn "Cleaning up temporary yay build" rm -rf /tmp/yay
  else
    msg_info "yay already installed, skipping bootstrap."
  fi

  if (( ${#AUR_PKGS[@]} )); then
    msg_info "AUR package list: ${AUR_PKGS[*]}"
    for aur_pkg in "${AUR_PKGS[@]}"; do
      if yay -Qi "$aur_pkg" >/dev/null 2>&1; then
        msg_info "✅ $aur_pkg already installed, skipping."
        continue
      fi

      msg_info "Installing $aur_pkg via yay..."
      if ! yay -S --needed --noconfirm --answerdiff None --answerclean None "$aur_pkg"; then
        msg_warn "Failed to install $aur_pkg with yay; continuing."
      fi
    done
  else
    msg_info "No AUR packages requested."
  fi

msg_section "Account configuration"
run "Enabling lingering for $USER" sudo loginctl enable-linger "$USER"

msg_section "Group membership"
run "Adding $USER to docker group" sudo usermod -aG docker "$USER"
run "Adding $USER to video & render groups" sudo usermod -aG video,render "$USER"

msg_section "System services"
run "Enabling Docker service" sudo systemctl enable --now docker
run_or_warn "Enabling PipeWire user services" systemctl --user enable --now pipewire.service pipewire-pulse.service wireplumber.service
run_or_warn "Enabling Firewalld service" sudo systemctl enable --now firewalld
run_or_warn "Enabling Bluetooth service" sudo systemctl enable --now bluetooth

msg_section "Hyprland services"
run_or_warn "Enabling Hyprland user services" systemctl --user enable --now hypridle.service hyprpaper.service waybar.service hyprpolkitagent.service

msg_section "XDG desktop portal services"
run_or_warn "Reloading user systemd daemon" systemctl --user daemon-reload
run_or_warn "Enabling portal services" systemctl --user enable --now xdg-desktop-portal-hyprland.service xdg-desktop-portal.service
run_or_warn "Restarting portal services" systemctl --user restart xdg-desktop-portal-hyprland.service xdg-desktop-portal.service



{{ if has "sunshine" .extras }}

msg_section "Sunshine streaming"
if ! grep -q "lizardbyte" /etc/pacman.conf; then
  msg_info "Adding LizardByte beta repository for Sunshine"
  sudo tee -a /etc/pacman.conf > /dev/null <<EOF
[lizardbyte-beta]
SigLevel = Optional
Server = https://github.com/LizardByte/pacman-repo/releases/download/beta
EOF
fi

run "Installing Sunshine" sudo pacman -Syu --noconfirm sunshine
run_or_warn "Enabling Sunshine user service" systemctl --user enable --now sunshine.service

{{ end }}

{{- end }}

msg_section "Shell setup"
if [[ "$SHELL" != */zsh ]]; then
  run "Setting default shell to zsh" chsh -s "$(command -v zsh)"
else
  msg_info "Default shell already set to zsh."
fi

if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
  run "Installing Oh-My-Zsh" env RUNZSH=no KEEP_ZSHRC=yes sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
  msg_info "Oh-My-Zsh already installed, skipping."
fi



msg_success "One-time bootstrap done – open a new terminal!"
